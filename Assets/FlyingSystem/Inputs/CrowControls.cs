//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/FlyingSystem/Inputs/CrowControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CrowControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CrowControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CrowControls"",
    ""maps"": [
        {
            ""name"": ""Crow Movement"",
            ""id"": ""1e8e37f4-35f7-44a3-8eb9-a3823298c618"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4b9e6b98-94c3-4642-ac5a-d662b3a87623"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Camera"",
                    ""type"": ""PassThrough"",
                    ""id"": ""54ecdc1a-12b6-4985-a69c-b10a10e620fd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""a422a84e-1437-4a00-9244-2060ae96a722"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""892b4f14-61b0-4b12-b2da-7b6ddc05dd61"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6746d038-d1e6-4581-9a63-c6200064ff1f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7c4fdf16-ddab-4258-8840-292689c5b3c6"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0234e4bc-dfb3-4620-ae98-c614162630e3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b3b9463d-73b9-438f-bdec-9b6d520c051b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9d0852dd-2263-4373-b48b-54797ed4d1a5"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cc995756-e6c6-4632-9c86-e43be7821a8e"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eb259fe9-d073-4bb6-a0f0-f9249d62c7f8"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Crow Actions"",
            ""id"": ""e78707d0-08c7-449c-9081-7de73b944207"",
            ""actions"": [
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""76ca4270-e770-4142-b2d5-c2cd4e83e0f4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""1e18db7b-8a36-4dd1-a855-af1df769faa3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""X"",
                    ""type"": ""Button"",
                    ""id"": ""a5dc8c17-e286-4e69-a4b9-242572144344"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fly"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4db53e52-a54d-469d-acf0-2884837153da"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""c1b77718-63a4-4ed1-8f82-2356795b854f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e59b15e7-81cf-4663-af7e-5340c3259c39"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bfc5f652-b66b-400f-ab3f-7f1617a4ad4e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a89e358a-c281-4050-a2d4-72e15116cd35"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""X"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""46c47215-4765-45e4-a187-b8c379907314"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fly"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b11f30d5-17f6-4e56-b82b-d93f0c577c4b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Crow Movement
        m_CrowMovement = asset.FindActionMap("Crow Movement", throwIfNotFound: true);
        m_CrowMovement_Movement = m_CrowMovement.FindAction("Movement", throwIfNotFound: true);
        m_CrowMovement_Camera = m_CrowMovement.FindAction("Camera", throwIfNotFound: true);
        m_CrowMovement_Click = m_CrowMovement.FindAction("Click", throwIfNotFound: true);
        // Crow Actions
        m_CrowActions = asset.FindActionMap("Crow Actions", throwIfNotFound: true);
        m_CrowActions_Sprint = m_CrowActions.FindAction("Sprint", throwIfNotFound: true);
        m_CrowActions_Jump = m_CrowActions.FindAction("Jump", throwIfNotFound: true);
        m_CrowActions_X = m_CrowActions.FindAction("X", throwIfNotFound: true);
        m_CrowActions_Fly = m_CrowActions.FindAction("Fly", throwIfNotFound: true);
        m_CrowActions_Attack = m_CrowActions.FindAction("Attack", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Crow Movement
    private readonly InputActionMap m_CrowMovement;
    private List<ICrowMovementActions> m_CrowMovementActionsCallbackInterfaces = new List<ICrowMovementActions>();
    private readonly InputAction m_CrowMovement_Movement;
    private readonly InputAction m_CrowMovement_Camera;
    private readonly InputAction m_CrowMovement_Click;
    public struct CrowMovementActions
    {
        private @CrowControls m_Wrapper;
        public CrowMovementActions(@CrowControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_CrowMovement_Movement;
        public InputAction @Camera => m_Wrapper.m_CrowMovement_Camera;
        public InputAction @Click => m_Wrapper.m_CrowMovement_Click;
        public InputActionMap Get() { return m_Wrapper.m_CrowMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CrowMovementActions set) { return set.Get(); }
        public void AddCallbacks(ICrowMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_CrowMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CrowMovementActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Camera.started += instance.OnCamera;
            @Camera.performed += instance.OnCamera;
            @Camera.canceled += instance.OnCamera;
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
        }

        private void UnregisterCallbacks(ICrowMovementActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Camera.started -= instance.OnCamera;
            @Camera.performed -= instance.OnCamera;
            @Camera.canceled -= instance.OnCamera;
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
        }

        public void RemoveCallbacks(ICrowMovementActions instance)
        {
            if (m_Wrapper.m_CrowMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICrowMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_CrowMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CrowMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CrowMovementActions @CrowMovement => new CrowMovementActions(this);

    // Crow Actions
    private readonly InputActionMap m_CrowActions;
    private List<ICrowActionsActions> m_CrowActionsActionsCallbackInterfaces = new List<ICrowActionsActions>();
    private readonly InputAction m_CrowActions_Sprint;
    private readonly InputAction m_CrowActions_Jump;
    private readonly InputAction m_CrowActions_X;
    private readonly InputAction m_CrowActions_Fly;
    private readonly InputAction m_CrowActions_Attack;
    public struct CrowActionsActions
    {
        private @CrowControls m_Wrapper;
        public CrowActionsActions(@CrowControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Sprint => m_Wrapper.m_CrowActions_Sprint;
        public InputAction @Jump => m_Wrapper.m_CrowActions_Jump;
        public InputAction @X => m_Wrapper.m_CrowActions_X;
        public InputAction @Fly => m_Wrapper.m_CrowActions_Fly;
        public InputAction @Attack => m_Wrapper.m_CrowActions_Attack;
        public InputActionMap Get() { return m_Wrapper.m_CrowActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CrowActionsActions set) { return set.Get(); }
        public void AddCallbacks(ICrowActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_CrowActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CrowActionsActionsCallbackInterfaces.Add(instance);
            @Sprint.started += instance.OnSprint;
            @Sprint.performed += instance.OnSprint;
            @Sprint.canceled += instance.OnSprint;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @X.started += instance.OnX;
            @X.performed += instance.OnX;
            @X.canceled += instance.OnX;
            @Fly.started += instance.OnFly;
            @Fly.performed += instance.OnFly;
            @Fly.canceled += instance.OnFly;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
        }

        private void UnregisterCallbacks(ICrowActionsActions instance)
        {
            @Sprint.started -= instance.OnSprint;
            @Sprint.performed -= instance.OnSprint;
            @Sprint.canceled -= instance.OnSprint;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @X.started -= instance.OnX;
            @X.performed -= instance.OnX;
            @X.canceled -= instance.OnX;
            @Fly.started -= instance.OnFly;
            @Fly.performed -= instance.OnFly;
            @Fly.canceled -= instance.OnFly;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
        }

        public void RemoveCallbacks(ICrowActionsActions instance)
        {
            if (m_Wrapper.m_CrowActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICrowActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_CrowActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CrowActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CrowActionsActions @CrowActions => new CrowActionsActions(this);
    public interface ICrowMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnCamera(InputAction.CallbackContext context);
        void OnClick(InputAction.CallbackContext context);
    }
    public interface ICrowActionsActions
    {
        void OnSprint(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnX(InputAction.CallbackContext context);
        void OnFly(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
    }
}
